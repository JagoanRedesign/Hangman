from hangmanforplayer import HangManForRusPlayer
from guess import HangmanGuessingRus
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, types
import os

storage = MemoryStorage()
bot = Bot(token='5508498603:AAG91bL7OyozDlqxNcE4j3of-GGzzoV04aQ')
dp = Dispatcher(bot, storage=storage)
letter = " "
word = " "
hide = " "
count_of_error = 0
answer = " "
rnd = True
sets = [set() for _ in range(5000)]
i = 0
lines = {None}
hide1 = {None}


class MyState(StatesGroup):
    wait_for_inputs = State()
    success = State()
    not_succsess = State()
    wait_for_inputs_2 = State()
    check = State()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! \n–î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É?) \n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /play –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")


@dp.message_handler(commands=['play'])
async def process_play(message: types.Message):
    global keyboard_play
    keyboard_play = types.ReplyKeyboardMarkup(resize_keyboard=True)
    await MyState.succsess.set()
    buttons_play = ["üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", "üá¨üáß Choose your language"]
    keyboard_play.add(*buttons_play)
    await message.answer("üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / üá¨üáß Choose your language", reply_markup=keyboard_play)


@dp.message_handler(Text(equals="üá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"))
async def RUS(message: types.Message):
    await message.answer("–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º", reply_markup=ReplyKeyboardRemove())
    keyboard_RUS = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons_RUS = ["–û—Ç–≥–∞–¥–∞—Ç—å", "–ó–∞–≥–∞–¥–∞—Ç—å"]
    keyboard_RUS.add(*buttons_RUS)
    await message.answer("–•–æ—á–µ—à—å –∑–∞–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ –º–Ω–µ –∏–ª–∏ —è –ø—Ä–æ–≤–µ—Ä—é —Ç–≤–æ—é —ç—Ä—É–¥–∏—Ü–∏—é?", reply_markup=keyboard_RUS)


@dp.message_handler(Text(equals="–û—Ç–≥–∞–¥–∞—Ç—å"))
async def guess(message: types.Message):
    global count_of_error
    global answer
    global hide
    global word
    word = HangManForRusPlayer.rand_word()
    hide = HangManForRusPlayer.hide_word(word)
    await message.answer("–í–ò–°–ò–õ–ò–¶–ê", reply_markup=ReplyKeyboardRemove())
    await message.answer(f"–í–∞—à–µ —Å–ª–æ–≤–æ:{hide} .\n–í–≤–æ–¥–∏—Ç–µ –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ –∏ –Ω–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å, —ç—Ç–æ –Ω–µ —Å–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞. –•–ê–•–ê–•–ê–•–ê–•–ê–•")
    await MyState.wait_for_inputs.set()


@dp.message_handler(state=MyState.wait_for_inputs)
async def input_from_user(message: types.Message, state: FSMContext):
    global word
    global letter
    global count_of_error
    global hide

    letter = message.text
    hide, answer, count_of_error = HangManForRusPlayer.check_word(
        hide, word, letter, count_of_error)
    if (answer == '–≤'):
        await message.answer("–í—ã–∏–≥—Ä–∞–ª")
        await message.answer(f"{word}")
        await MyState.success.set()
    elif (answer == '–ø'):
        await message.answer("–ü—Ä–æ–∏–≥—Ä–∞–ª")
        await message.answer(f"{word}")
        await MyState.not_succsess.set()
    elif (answer == '–Ω'):
        await message.answer("–ù–µ—Ç).")
        await message.answer(f"{hide}")
    elif (answer == '–∑'):
        await message.answer("–î–∞")
        await message.answer(f"{hide}")


@dp.message_handler(Text(equals="–ó–∞–≥–∞–¥–∞—Ç—å"))
async def make_a_wish(message: types.Message):
    await message.answer("–í–ò–°–ò–õ–ò–¶–ê", reply_markup=ReplyKeyboardRemove())
    await message.answer("–í–≤–µ–¥–∏ —Å–∫—Ä—ã—Ç—ã–µ –±—É–∫–≤—ã —Å –ø–æ–º–æ—â—å—é _. –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ - c_–æ_–æ (—Å–ª–æ–≤–æ). \n–Ø –æ—Ç–≥–∞–¥–∞—é –ª—é–±–æ–µ —Ç–≤–æ—ë —Å–ª–æ–≤–æ.")
    await MyState.wait_for_inputs_2.set()


@dp.message_handler(state=MyState.wait_for_inputs_2)
async def pop(message: types.Message, state: FSMContext):
    global word
    global hide
    global count_of_error
    global answer
    global setword
    global rnd
    global sets
    global lines
    global i
    global hide1
    if (rnd):
        setword = set()
        word = " "
        hide = message.text
        i = 0
        count_of_error = 0
        answer = ' '
        hide1, lines = HangmanGuessingRus.Var(hide)
    else:
        answ = message.text
        if (answ == '–î–∞'):
            hide1[i] = word[i]
            hide = ''.join(hide1)
            setword.add(word)
        if (answ == '–ù–µ—Ç'):
            count_of_error = count_of_error+1
            sets[i].add(word[i])
            if (count_of_error == 6):
                await message.answer("–í—ã –ø–æ–±–µ–¥–∏–ª–∏, –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –∑–Ω–∞–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞")
                await MyState.succsess.set()
                exit()

    setword = HangmanGuessingRus.sett(lines, hide)
    if (len(setword) == 1):
        k = setword.pop()
        await message.answer(f"–í–∞—à–µ —Å–ª–æ–≤–æ: {k}")
        await MyState.success.set()
    else:
        hide1, word, i, setword = HangmanGuessingRus.Guess(
            hide1, setword, sets)
        rnd = False
        await message.answer(f'–í —Å–ª–æ–≤–µ –µ—Å—Ç—å –±—É–∫–≤–∞ "{word[i]}" –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i+1}?')
        await MyState.wait_for_inputs_2.set()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
